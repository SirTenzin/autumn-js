{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "attach-dialog",
  "type": "registry:component",
  "dependencies": [
    "autumn-js"
  ],
  "registryDependencies": [
    "button",
    "dialog"
  ],
  "files": [
    {
      "path": "registry/attach-dialog/attach-dialog.tsx",
      "content": "\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight, Loader2 } from \"lucide-react\";\nimport { type CheckProductPreview } from \"autumn-js\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogFooter,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { getAttachContent } from \"@/registry/attach-dialog/lib/attach-content\";\nimport { useCustomer } from \"autumn-js/react\";\n\nexport interface AttachDialogProps {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  preview: CheckProductPreview;\n  onClick: (options?: any) => Promise<void>;\n}\n\nexport default function AttachDialog(params?: AttachDialogProps) {\n  const { attach } = useCustomer();\n  const [loading, setLoading] = useState(false);\n  const [optionsInput, setOptionsInput] = useState<FeatureOption[]>(\n    params?.preview?.options || []\n  );\n\n  const getTotalPrice = () => {\n    let sum = due_today?.price || 0;\n    optionsInput.forEach((option) => {\n      if (option.price && option.quantity) {\n        sum += option.price * (option.quantity / option.billing_units);\n      }\n    });\n    return sum;\n  };\n\n  useEffect(() => {\n    setOptionsInput(params?.preview?.options || []);\n  }, [params?.preview?.options]);\n\n  if (!params || !params.preview) {\n    return <></>;\n  }\n\n  const { open, setOpen, preview } = params;\n  const { items, due_today } = preview;\n  const { title, message } = getAttachContent(preview);\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogContent\n        className={cn(\n          \"p-0 pt-4 gap-0 text-foreground overflow-hidden text-sm\"\n        )}\n      >\n        <DialogTitle className={cn(\"px-6 mb-1 \")}>{title}</DialogTitle>\n        <div className={cn(\"px-6 mt-1 mb-4 text-muted-foreground\")}>\n          {message}\n        </div>\n        {(items || optionsInput.length > 0) && (\n          <div className=\"mb-6 px-6\">\n            {items?.map((item) => (\n              <PriceItem key={item.description}>\n                <span className=\"truncate flex-1\">\n                  {item.description}\n                </span>\n                <span>{item.price}</span>\n              </PriceItem>\n            ))}\n\n            {optionsInput?.map((option, index) => {\n              return (\n                <OptionsInput\n                  key={option.feature_name}\n                  option={option as FeatureOptionWithRequiredPrice}\n                  optionsInput={optionsInput}\n                  setOptionsInput={setOptionsInput}\n                  index={index}\n                />\n              );\n            })}\n          </div>\n        )}\n\n        <DialogFooter className=\"flex flex-col sm:flex-row justify-between gap-x-4 py-2 pl-6 pr-3 bg-secondary border-t shadow-inner\">\n          {due_today && (\n            <TotalPrice>\n              <span>Due Today</span>\n              <span>\n                {new Intl.NumberFormat(\"en-US\", {\n                  style: \"currency\",\n                  currency: due_today.currency,\n                }).format(getTotalPrice())}\n              </span>\n            </TotalPrice>\n          )}\n          <Button\n            size=\"sm\"\n            onClick={async () => {\n              setLoading(true);\n              await attach({\n                productId: preview.product_id,\n                options: optionsInput.map((option) => ({\n                  featureId: option.feature_id,\n                  quantity: option.quantity || 0,\n                })),\n              });\n              setOpen(false);\n              setLoading(false);\n            }}\n            disabled={loading}\n            className=\"min-w-16 flex items-center gap-2\"\n          >\n            {loading ? (\n              <Loader2 className=\"w-4 h-4 animate-spin\" />\n            ) : (\n              <>\n                <span className=\"whitespace-nowrap flex gap-1\">\n                  Confirm\n                </span>\n              </>\n            )}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport const PriceItem = ({\n  children,\n  className,\n  ...props\n}: {\n  children: React.ReactNode;\n  className?: string;\n} & React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <div\n      className={cn(\n        \"flex flex-col pb-4 sm:pb-0 gap-1 sm:flex-row justify-between sm:h-7 sm:gap-2 sm:items-center\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\ninterface FeatureOption {\n  feature_id: string;\n  feature_name: string;\n  billing_units: number;\n  price?: number;\n  quantity?: number;\n}\n\ninterface FeatureOptionWithRequiredPrice\n  extends Omit<FeatureOption, \"price\" | \"quantity\"> {\n  price: number;\n  quantity: number;\n}\n\nexport const OptionsInput = ({\n  className,\n  option,\n  optionsInput,\n  setOptionsInput,\n  index,\n  ...props\n}: {\n  className?: string;\n  option: FeatureOptionWithRequiredPrice;\n  optionsInput: FeatureOption[];\n  setOptionsInput: (options: FeatureOption[]) => void;\n  index: number;\n} & React.HTMLAttributes<HTMLDivElement>) => {\n  const { feature_name, billing_units, quantity, price } = option;\n  return (\n    <PriceItem key={feature_name}>\n      <span>{feature_name}</span>\n      <QuantityInput\n        key={feature_name}\n        value={quantity ? quantity / billing_units : \"\"}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          const newOptions = [...optionsInput];\n          newOptions[index].quantity = parseInt(e.target.value) * billing_units;\n          setOptionsInput(newOptions);\n        }}\n      >\n        <span className=\"\">\n          Ã— ${price} per {billing_units === 1 ? \" \" : billing_units}{\" \"}\n          {feature_name}\n        </span>\n      </QuantityInput>\n    </PriceItem>\n  );\n};\n\nexport const QuantityInput = ({\n  children,\n  onChange,\n  value,\n  className,\n  ...props\n}: {\n  children: React.ReactNode;\n  value: string | number;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  className?: string;\n} & React.HTMLAttributes<HTMLDivElement>) => {\n  const currentValue = Number(value) || 0;\n\n  const handleValueChange = (newValue: number) => {\n    const syntheticEvent = {\n      target: { value: String(newValue) },\n    } as React.ChangeEvent<HTMLInputElement>;\n    onChange(syntheticEvent);\n  };\n\n  return (\n    <div\n      className={cn(className, \"flex flex-row items-center gap-4\")}\n      {...props}\n    >\n      <div className=\"flex items-center gap-1\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={() =>\n            currentValue > 0 && handleValueChange(currentValue - 1)\n          }\n          disabled={currentValue <= 0}\n          className=\"h-6 w-6 pb-0.5\"\n        >\n          -\n        </Button>\n        <span className=\"w-8 text-center text-foreground\">\n          {currentValue}\n        </span>\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={() => handleValueChange(currentValue + 1)}\n          className=\"h-6 w-6 pb-0.5\"\n        >\n          +\n        </Button>\n      </div>\n      {children}\n    </div>\n  );\n};\n\nexport const TotalPrice = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <div className=\"w-full font-semibold flex justify-between items-center\">\n      {children}\n    </div>\n  );\n};\n\nexport const PricingDialogButton = ({\n  children,\n  size,\n  onClick,\n  disabled,\n  className,\n}: {\n  children: React.ReactNode;\n  size?: \"sm\" | \"lg\" | \"default\" | \"icon\";\n  onClick: () => void;\n  disabled?: boolean;\n  className?: string;\n}) => {\n  return (\n    <Button\n      onClick={onClick}\n      disabled={disabled}\n      size={size}\n      className={cn(className, \"shadow-sm shadow-stone-400\")}\n    >\n      {children}\n      <ArrowRight className=\"!h-3\" />\n    </Button>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/autumn/attach-dialog.tsx"
    },
    {
      "path": "registry/attach-dialog/lib/attach-content.tsx",
      "content": "import { type CheckProductPreview } from \"autumn-js\";\n\nexport const getAttachContent = (preview: CheckProductPreview) => {\n  const {\n    scenario,\n    product_name,\n    recurring,\n    current_product_name,\n    next_cycle_at,\n  } = preview;\n\n  const nextCycleAtStr = next_cycle_at\n    ? new Date(next_cycle_at).toLocaleDateString()\n    : undefined;\n\n  switch (scenario) {\n    case \"scheduled\":\n      return {\n        title: <p>{product_name} product already scheduled</p>,\n        message: (\n          <p>\n            You are currently on product {current_product_name} and are\n            scheduled to start {product_name} on {nextCycleAtStr}.\n          </p>\n        ),\n      };\n\n    case \"active\":\n      return {\n        title: <p>Product already active</p>,\n        message: <p>You are already subscribed to this product.</p>,\n      };\n\n    case \"new\":\n      if (recurring) {\n        return {\n          title: <p>Subscribe to {product_name}</p>,\n          message: (\n            <p>\n              By clicking confirm, you will be subscribed to {product_name} and\n              your card will be charged immediately.\n            </p>\n          ),\n        };\n      } else {\n        return {\n          title: <p>Purchase {product_name}</p>,\n          message: (\n            <p>\n              By clicking confirm, you will purchase {product_name} and your\n              card will be charged immediately.\n            </p>\n          ),\n        };\n      }\n\n    case \"renew\":\n      return {\n        title: <p>Renew</p>,\n        message: (\n          <p>\n            By clicking confirm, you will renew your subscription to{\" \"}\n            {product_name}.\n          </p>\n        ),\n      };\n\n    case \"upgrade\":\n      return {\n        title: <p>Upgrade to {product_name}</p>,\n        message: (\n          <p>\n            By clicking confirm, you will upgrade to {product_name} and your\n            payment method will be charged immediately.\n          </p>\n        ),\n      };\n\n    case \"downgrade\":\n      return {\n        title: <p>Downgrade to {product_name}</p>,\n        message: (\n          <p>\n            By clicking confirm, your current subscription to{\" \"}\n            {current_product_name} will be cancelled and a new subscription to{\" \"}\n            {product_name} will begin on {nextCycleAtStr}.\n          </p>\n        ),\n      };\n\n    case \"cancel\":\n      return {\n        title: <p>Cancel</p>,\n        message: (\n          <p>\n            By clicking confirm, your subscription to {current_product_name}{\" \"}\n            will end on {nextCycleAtStr}.\n          </p>\n        ),\n      };\n\n    default:\n      return {\n        title: <p>Change Subscription</p>,\n        message: <p>You are about to change your subscription.</p>,\n      };\n  }\n};\n",
      "type": "registry:lib",
      "target": "lib/autumn/attach-content.tsx"
    }
  ]
}