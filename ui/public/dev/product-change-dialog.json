{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dev/product-change-dialog",
  "type": "registry:component",
  "dependencies": [
    "autumn-js"
  ],
  "registryDependencies": [
    "https://pricecn.vercel.app/dev/pricing-dialog.json"
  ],
  "files": [
    {
      "path": "registry/product-change-dialog/product-change-dialog.tsx",
      "content": "\"use client\";\nimport React, { useEffect, useState } from \"react\";\nimport { Loader2 } from \"lucide-react\";\nimport {\n  PricingDialog,\n  PricingDialogTitle,\n  Information,\n  PriceItem,\n  QuantityInput,\n  PricingDialogFooter,\n  TotalPrice,\n  PricingDialogButton,\n} from \"@/components/pricing/pricing-dialog\";\n\nimport { getProductChangeTexts } from \"@/registry/product-change-dialog/lib/get-product-change-texts\";\nimport { type CheckProductFormattedPreview } from \"autumn-js\";\nimport { useAutumn } from \"autumn-js/react\";\n\nexport interface ProductChangeDialogProps {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  preview: CheckProductFormattedPreview;\n  onClick: (options?: any) => Promise<void>;\n}\n\nexport default function ProductChangeDialog(params?: ProductChangeDialogProps) {\n  const { attach } = useAutumn();\n  const [loading, setLoading] = useState(false);\n  const [prepaidTotals, setPrepaidTotals] = useState(0);\n  const [optionsInput, setOptionsInput] = useState<\n    {\n      feature_id: string;\n      feature_name: string;\n      billing_units: number;\n      price?: number;\n      quantity?: number;\n    }[]\n  >(params?.preview?.options || []);\n\n  useEffect(() => {\n    let sum = 0;\n    optionsInput.forEach((option) => {\n      if (option.price && option.quantity) {\n        sum += option.price * (option.quantity / option.billing_units);\n      }\n    });\n    setPrepaidTotals(sum);\n  }, [optionsInput]);\n\n  useEffect(() => {\n    setOptionsInput(params?.preview?.options || []);\n  }, [params?.preview?.options]);\n\n  if (!params || !params.preview) {\n    return <></>;\n  }\n\n  const { open, setOpen, preview } = params;\n  const { items, due_today, error_on_attach } = preview;\n  const { title, message } = getProductChangeTexts(preview);\n\n  return (\n    <PricingDialog open={open} setOpen={setOpen}>\n      <PricingDialogTitle>{title}</PricingDialogTitle>\n      <Information>{message}</Information>\n      {items &&\n        items.length > 0 &&\n        items.map((item) => {\n          const { description, price } = item;\n          return (\n            <PriceItem key={description}>\n              <span>{description}</span>\n              <span>{price}</span>\n            </PriceItem>\n          );\n        })}\n\n      {optionsInput.length > 0 &&\n        optionsInput.map((option, index) => {\n          const { feature_name, billing_units, quantity, price } = option;\n          return (\n            <PriceItem key={feature_name}>\n              <span>{feature_name}</span>\n              <QuantityInput\n                key={feature_name}\n                value={quantity ? quantity / billing_units : \"\"}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  const newOptions = [...optionsInput];\n                  newOptions[index].quantity =\n                    parseInt(e.target.value) * billing_units;\n                  setOptionsInput(newOptions);\n                }}\n              >\n                <span className=\"text-muted-foreground\">\n                  Ã— ${price} per {billing_units === 1 ? \" \" : billing_units}{\" \"}\n                  {feature_name}\n                </span>\n              </QuantityInput>\n            </PriceItem>\n          );\n        })}\n\n      <PricingDialogFooter>\n        {due_today && (\n          <TotalPrice>\n            <span>Due Today</span>\n            <span>\n              {new Intl.NumberFormat(\"en-US\", {\n                style: \"currency\",\n                currency: due_today.currency,\n              }).format(due_today.price + prepaidTotals)}\n            </span>\n          </TotalPrice>\n        )}\n        <PricingDialogButton\n          size=\"sm\"\n          onClick={async () => {\n            setLoading(true);\n            try {\n              if (!error_on_attach) {\n                await attach({\n                  productId: preview.product_id,\n                  options: optionsInput.map((option) => ({\n                    featureId: option.feature_id,\n                    quantity: option.quantity || 0,\n                  })),\n                });\n              }\n              setOpen(false);\n            } catch (error) {\n              console.error(error);\n            }\n            setLoading(false);\n          }}\n          disabled={loading}\n        >\n          {loading ? <Loader2 className=\"w-4 h-4 animate-spin\" /> : \"Confirm\"}\n        </PricingDialogButton>\n      </PricingDialogFooter>\n    </PricingDialog>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/autumn/product-change-dialog.tsx"
    },
    {
      "path": "registry/product-change-dialog/lib/get-product-change-texts.tsx",
      "content": "import { type CheckProductFormattedPreview } from \"autumn-js\";\n\nexport const getProductChangeTexts = (\n  preview: CheckProductFormattedPreview\n) => {\n  const {\n    scenario,\n    product_name,\n    recurring,\n    current_product_name,\n    next_cycle_at,\n  } = preview;\n\n  const nextCycleAtStr = next_cycle_at\n    ? new Date(next_cycle_at).toLocaleDateString()\n    : undefined;\n\n  switch (scenario) {\n    case \"scheduled\":\n      return {\n        title: <p>{product_name} product already scheduled</p>,\n        message: (\n          <p>\n            You are currently on product {current_product_name} and are\n            scheduled to start {product_name} on {nextCycleAtStr}.\n          </p>\n        ),\n      };\n\n    case \"active\":\n      return {\n        title: <p>Product already active</p>,\n        message: <p>You are already subscribed to this product.</p>,\n      };\n\n    case \"new\":\n      if (recurring) {\n        return {\n          title: <p>Subscribe to {product_name}</p>,\n          message: (\n            <p>\n              By clicking confirm, you will be subscribed to {product_name} and\n              your card will be charged immediately.\n            </p>\n          ),\n        };\n      } else {\n        return {\n          title: <p>Purchase {product_name}</p>,\n          message: (\n            <p>\n              By clicking confirm, you will purchase {product_name} and your\n              card will be charged immedaitely.\n            </p>\n          ),\n        };\n      }\n\n    case \"renew\":\n      return {\n        title: <p>Renew</p>,\n        message: (\n          <p>\n            By clicking confirm, you will renew your subscription to{\" \"}\n            {product_name}.\n          </p>\n        ),\n      };\n\n    case \"upgrade\":\n      return {\n        title: <p>Upgrade to {product_name}</p>,\n        message: (\n          <p>\n            By clicking confirm, you will upgrade your subscription to{\" \"}\n            {product_name} and your card will be charged immediately.\n          </p>\n        ),\n      };\n\n    case \"downgrade\":\n      return {\n        title: <p>Downgrade to {product_name}</p>,\n        message: (\n          <p>\n            By clicking confirm, your current subscription to{\" \"}\n            {current_product_name} will be cancelled and a new subscription to{\" \"}\n            {product_name} will begin on {nextCycleAtStr}.\n          </p>\n        ),\n      };\n\n    case \"cancel\":\n      return {\n        title: <p>Cancel</p>,\n        message: (\n          <p>\n            By clicking confirm, your subscription to {current_product_name}{\" \"}\n            will end on {nextCycleAtStr}.\n          </p>\n        ),\n      };\n\n    default:\n      return {\n        title: <p>Change Subscription</p>,\n        message: <p>You are about to change your subscription.</p>,\n      };\n  }\n};\n",
      "type": "registry:lib",
      "target": "lib/autumn/get-product-change-texts.tsx"
    }
  ]
}