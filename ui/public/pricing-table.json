{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pricing-table",
  "type": "registry:component",
  "dependencies": [
    "autumn-js"
  ],
  "registryDependencies": [
    "switch",
    "button",
    "dialog"
  ],
  "files": [
    {
      "path": "registry/attach-dialog/attach-dialog.tsx",
      "content": "\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight, Loader2 } from \"lucide-react\";\nimport { type CheckProductPreview } from \"autumn-js\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogFooter,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { getAttachContent } from \"@/registry/attach-dialog/lib/attach-content\";\nimport { useCustomer } from \"autumn-js/react\";\n\nexport interface AttachDialogProps {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  preview: CheckProductPreview;\n  onClick: (options?: any) => Promise<void>;\n}\n\nexport default function AttachDialog(params?: AttachDialogProps) {\n  const { attach } = useCustomer();\n  const [loading, setLoading] = useState(false);\n  const [optionsInput, setOptionsInput] = useState<FeatureOption[]>(\n    params?.preview?.options || []\n  );\n\n  const getTotalPrice = () => {\n    let sum = due_today?.price || 0;\n    optionsInput.forEach((option) => {\n      if (option.price && option.quantity) {\n        sum += option.price * (option.quantity / option.billing_units);\n      }\n    });\n    return sum;\n  };\n\n  useEffect(() => {\n    setOptionsInput(params?.preview?.options || []);\n  }, [params?.preview?.options]);\n\n  if (!params || !params.preview) {\n    return <></>;\n  }\n\n  const { open, setOpen, preview } = params;\n  const { items, due_today } = preview;\n  const { title, message } = getAttachContent(preview);\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogContent\n        className={cn(\"p-0 pt-4 gap-0 text-foreground overflow-hidden text-sm\")}\n      >\n        <DialogTitle className={cn(\"px-6 mb-1 \")}>{title}</DialogTitle>\n        <div className={cn(\"px-6 mt-1 mb-4 text-muted-foreground\")}>\n          {message}\n        </div>\n        {(items || optionsInput.length > 0) && (\n          <div className=\"mb-6 px-6\">\n            {items?.map((item) => (\n              <PriceItem key={item.description}>\n                <span className=\"truncate flex-1\">{item.description}</span>\n                <span>{item.price}</span>\n              </PriceItem>\n            ))}\n\n            {optionsInput?.map((option, index) => {\n              return (\n                <OptionsInput\n                  key={option.feature_name}\n                  option={option as FeatureOptionWithRequiredPrice}\n                  optionsInput={optionsInput}\n                  setOptionsInput={setOptionsInput}\n                  index={index}\n                />\n              );\n            })}\n          </div>\n        )}\n\n        <DialogFooter className=\"flex flex-col sm:flex-row justify-between gap-x-4 py-2 pl-6 pr-3 bg-secondary border-t shadow-inner\">\n          {due_today && (\n            <TotalPrice>\n              <span>Due Today</span>\n              <span>\n                {new Intl.NumberFormat(\"en-US\", {\n                  style: \"currency\",\n                  currency: due_today.currency,\n                }).format(getTotalPrice())}\n              </span>\n            </TotalPrice>\n          )}\n          <Button\n            size=\"sm\"\n            onClick={async () => {\n              setLoading(true);\n              await attach({\n                productId: preview.product_id,\n                options: optionsInput.map((option) => ({\n                  featureId: option.feature_id,\n                  quantity: option.quantity || 0,\n                })),\n              });\n              setOpen(false);\n              setLoading(false);\n            }}\n            disabled={loading}\n            className=\"min-w-16 flex items-center gap-2\"\n          >\n            {loading ? (\n              <Loader2 className=\"w-4 h-4 animate-spin\" />\n            ) : (\n              <>\n                <span className=\"whitespace-nowrap flex gap-1\">Confirm</span>\n              </>\n            )}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport const PriceItem = ({\n  children,\n  className,\n  ...props\n}: {\n  children: React.ReactNode;\n  className?: string;\n} & React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <div\n      className={cn(\n        \"flex flex-col pb-4 sm:pb-0 gap-1 sm:flex-row justify-between sm:h-7 sm:gap-2 sm:items-center\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\ninterface FeatureOption {\n  feature_id: string;\n  feature_name: string;\n  billing_units: number;\n  price?: number;\n  quantity?: number;\n}\n\ninterface FeatureOptionWithRequiredPrice\n  extends Omit<FeatureOption, \"price\" | \"quantity\"> {\n  price: number;\n  quantity: number;\n}\n\nexport const OptionsInput = ({\n  className,\n  option,\n  optionsInput,\n  setOptionsInput,\n  index,\n  ...props\n}: {\n  className?: string;\n  option: FeatureOptionWithRequiredPrice;\n  optionsInput: FeatureOption[];\n  setOptionsInput: (options: FeatureOption[]) => void;\n  index: number;\n} & React.HTMLAttributes<HTMLDivElement>) => {\n  const { feature_name, billing_units, quantity, price } = option;\n  return (\n    <PriceItem key={feature_name}>\n      <span>{feature_name}</span>\n      <QuantityInput\n        key={feature_name}\n        value={quantity ? quantity / billing_units : \"\"}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          const newOptions = [...optionsInput];\n          newOptions[index].quantity = parseInt(e.target.value) * billing_units;\n          setOptionsInput(newOptions);\n        }}\n      >\n        <span className=\"\">\n          Ã— ${price} per {billing_units === 1 ? \" \" : billing_units}{\" \"}\n          {feature_name}\n        </span>\n      </QuantityInput>\n    </PriceItem>\n  );\n};\n\nexport const QuantityInput = ({\n  children,\n  onChange,\n  value,\n  className,\n  ...props\n}: {\n  children: React.ReactNode;\n  value: string | number;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  className?: string;\n} & React.HTMLAttributes<HTMLDivElement>) => {\n  const currentValue = Number(value) || 0;\n\n  const handleValueChange = (newValue: number) => {\n    const syntheticEvent = {\n      target: { value: String(newValue) },\n    } as React.ChangeEvent<HTMLInputElement>;\n    onChange(syntheticEvent);\n  };\n\n  return (\n    <div\n      className={cn(className, \"flex flex-row items-center gap-4\")}\n      {...props}\n    >\n      <div className=\"flex items-center gap-1\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={() =>\n            currentValue > 0 && handleValueChange(currentValue - 1)\n          }\n          disabled={currentValue <= 0}\n          className=\"h-6 w-6 pb-0.5\"\n        >\n          -\n        </Button>\n        <span className=\"w-8 text-center text-foreground\">{currentValue}</span>\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={() => handleValueChange(currentValue + 1)}\n          className=\"h-6 w-6 pb-0.5\"\n        >\n          +\n        </Button>\n      </div>\n      {children}\n    </div>\n  );\n};\n\nexport const TotalPrice = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <div className=\"w-full font-semibold flex justify-between items-center\">\n      {children}\n    </div>\n  );\n};\n\nexport const PricingDialogButton = ({\n  children,\n  size,\n  onClick,\n  disabled,\n  className,\n}: {\n  children: React.ReactNode;\n  size?: \"sm\" | \"lg\" | \"default\" | \"icon\";\n  onClick: () => void;\n  disabled?: boolean;\n  className?: string;\n}) => {\n  return (\n    <Button\n      onClick={onClick}\n      disabled={disabled}\n      size={size}\n      className={cn(className, \"shadow-sm shadow-stone-400\")}\n    >\n      {children}\n      <ArrowRight className=\"!h-3\" />\n    </Button>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/autumn/attach-dialog.tsx"
    },
    {
      "path": "registry/attach-dialog/lib/attach-content.tsx",
      "content": "import { type CheckProductPreview } from \"autumn-js\";\n\nexport const getAttachContent = (preview: CheckProductPreview) => {\n  const {\n    scenario,\n    product_name,\n    recurring,\n    current_product_name,\n    next_cycle_at,\n  } = preview;\n\n  const nextCycleAtStr = next_cycle_at\n    ? new Date(next_cycle_at).toLocaleDateString()\n    : undefined;\n\n  switch (scenario) {\n    case \"scheduled\":\n      return {\n        title: <p>{product_name} product already scheduled</p>,\n        message: (\n          <p>\n            You are currently on product {current_product_name} and are\n            scheduled to start {product_name} on {nextCycleAtStr}.\n          </p>\n        ),\n      };\n\n    case \"active\":\n      return {\n        title: <p>Product already active</p>,\n        message: <p>You are already subscribed to this product.</p>,\n      };\n\n    case \"new\":\n      if (recurring) {\n        return {\n          title: <p>Subscribe to {product_name}</p>,\n          message: (\n            <p>\n              By clicking confirm, you will be subscribed to {product_name} and\n              your card will be charged immediately.\n            </p>\n          ),\n        };\n      } else {\n        return {\n          title: <p>Purchase {product_name}</p>,\n          message: (\n            <p>\n              By clicking confirm, you will purchase {product_name} and your\n              card will be charged immediately.\n            </p>\n          ),\n        };\n      }\n\n    case \"renew\":\n      return {\n        title: <p>Renew</p>,\n        message: (\n          <p>\n            By clicking confirm, you will renew your subscription to{\" \"}\n            {product_name}.\n          </p>\n        ),\n      };\n\n    case \"upgrade\":\n      return {\n        title: <p>Upgrade to {product_name}</p>,\n        message: (\n          <p>\n            By clicking confirm, you will upgrade to {product_name} and your\n            payment method will be charged immediately.\n          </p>\n        ),\n      };\n\n    case \"downgrade\":\n      return {\n        title: <p>Downgrade to {product_name}</p>,\n        message: (\n          <p>\n            By clicking confirm, your current subscription to{\" \"}\n            {current_product_name} will be cancelled and a new subscription to{\" \"}\n            {product_name} will begin on {nextCycleAtStr}.\n          </p>\n        ),\n      };\n\n    case \"cancel\":\n      return {\n        title: <p>Cancel</p>,\n        message: (\n          <p>\n            By clicking confirm, your subscription to {current_product_name}{\" \"}\n            will end on {nextCycleAtStr}.\n          </p>\n        ),\n      };\n\n    default:\n      return {\n        title: <p>Change Subscription</p>,\n        message: <p>You are about to change your subscription.</p>,\n      };\n  }\n};\n",
      "type": "registry:lib",
      "target": "lib/autumn/attach-content.tsx"
    },
    {
      "path": "registry/pricing-table/pricing-table.tsx",
      "content": "import React from \"react\";\nimport { useCustomer, usePricingTable } from \"autumn-js/react\";\nimport { createContext, useContext, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Button } from \"@/components/ui/button\";\nimport { Check, Loader2 } from \"lucide-react\";\nimport AttachDialog from \"@/registry/attach-dialog/attach-dialog\";\nimport { getPricingTableContent } from \"@/registry/pricing-table/lib/pricing-table-content\";\nimport { Product, ProductItem } from \"autumn-js\";\n\nexport default function PricingTable({\n  productDetails,\n}: {\n  productDetails?: any;\n}) {\n  const { attach } = useCustomer();\n  const [isAnnual, setIsAnnual] = useState(false);\n  const { products, isLoading, error } = usePricingTable({ productDetails });\n\n  if (isLoading) {\n    return (\n      <div className=\"w-full h-full flex justify-center items-center min-h-[300px]\">\n        <Loader2 className=\"w-6 h-6 text-zinc-400 animate-spin\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <div> Something went wrong...</div>;\n  }\n\n  const intervals = Array.from(\n    new Set(\n      products?.map((p) => p.properties?.interval_group).filter((i) => !!i)\n    )\n  );\n\n  const multiInterval = intervals.length > 1;\n\n  const intervalFilter = (product: any) => {\n    if (!product.properties?.interval_group) {\n      return true;\n    }\n\n    if (multiInterval) {\n      if (isAnnual) {\n        return product.properties?.interval_group === \"year\";\n      } else {\n        return product.properties?.interval_group === \"month\";\n      }\n    }\n\n    return true;\n  };\n\n  return (\n    <div>\n      {products && (\n        <PricingTableContainer\n          products={products as any}\n          isAnnualToggle={isAnnual}\n          setIsAnnualToggle={setIsAnnual}\n          multiInterval={multiInterval}\n        >\n          {products.filter(intervalFilter).map((product, index) => (\n            <PricingCard\n              key={index}\n              productId={product.id}\n              buttonProps={{\n                disabled:\n                  product.scenario === \"active\" ||\n                  product.scenario === \"scheduled\",\n                onClick: async () => {\n                  if (product.id) {\n                    await attach({\n                      productId: product.id,\n                      dialog: AttachDialog,\n                    });\n                  } else if (product.display?.button_url) {\n                    window.open(product.display?.button_url, \"_blank\");\n                  }\n                },\n              }}\n            />\n          ))}\n        </PricingTableContainer>\n      )}\n    </div>\n  );\n}\n\nconst PricingTableContext = createContext<{\n  isAnnualToggle: boolean;\n  setIsAnnualToggle: (isAnnual: boolean) => void;\n  products: Product[];\n  showFeatures: boolean;\n}>({\n  isAnnualToggle: false,\n  setIsAnnualToggle: () => {},\n  products: [],\n  showFeatures: true,\n});\n\nexport const usePricingTableContext = (componentName: string) => {\n  const context = useContext(PricingTableContext);\n\n  if (context === undefined) {\n    throw new Error(`${componentName} must be used within <PricingTable />`);\n  }\n\n  return context;\n};\n\nexport const PricingTableContainer = ({\n  children,\n  products,\n  showFeatures = true,\n  className,\n  isAnnualToggle,\n  setIsAnnualToggle,\n  multiInterval,\n}: {\n  children?: React.ReactNode;\n  products?: Product[];\n  showFeatures?: boolean;\n  className?: string;\n  isAnnualToggle: boolean;\n  setIsAnnualToggle: (isAnnual: boolean) => void;\n  multiInterval: boolean;\n}) => {\n  if (!products) {\n    throw new Error(\"products is required in <PricingTable />\");\n  }\n\n  if (products.length === 0) {\n    return <></>;\n  }\n\n  return (\n    <PricingTableContext.Provider\n      value={{ isAnnualToggle, setIsAnnualToggle, products, showFeatures }}\n    >\n      <div className={cn(\"flex items-center flex-col\")}>\n        {multiInterval && (\n          <div\n            className={cn(\n              products.some((p) => p.display?.recommend_text) && \"mb-8\"\n            )}\n          >\n            <AnnualSwitch\n              isAnnualToggle={isAnnualToggle}\n              setIsAnnualToggle={setIsAnnualToggle}\n            />\n          </div>\n        )}\n        <div\n          className={cn(\n            \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-[repeat(auto-fit,minmax(200px,1fr))] w-full gap-2\",\n            className\n          )}\n        >\n          {children}\n        </div>\n      </div>\n    </PricingTableContext.Provider>\n  );\n};\n\ninterface PricingCardProps {\n  productId: string;\n  showFeatures?: boolean;\n  className?: string;\n  onButtonClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  buttonProps?: React.ComponentProps<\"button\">;\n}\n\nexport const PricingCard = ({\n  productId,\n  className,\n  onButtonClick,\n  buttonProps,\n}: PricingCardProps) => {\n  const { products, showFeatures } = usePricingTableContext(\"PricingCard\");\n\n  const product = products.find((p) => p.id === productId);\n\n  if (!product) {\n    throw new Error(`Product with id ${productId} not found`);\n  }\n\n  const { name, display: productDisplay, items } = product;\n\n  const { buttonText } = getPricingTableContent(product);\n  const isRecommended = productDisplay?.recommend_text ? true : false;\n  const mainPriceDisplay = product.properties?.is_free\n    ? {\n        primary_text: \"Free\",\n      }\n    : product.items[0].display;\n\n  const featureItems = product.properties?.is_free\n    ? product.items\n    : product.items.slice(1);\n\n  return (\n    <div\n      className={cn(\n        \"w-full h-full py-6 text-foreground border rounded-lg shadow-sm max-w-xl\",\n        isRecommended &&\n          \"lg:-translate-y-6 lg:shadow-lg dark:shadow-zinc-800/80 lg:h-[calc(100%+48px)] bg-secondary/40\",\n        className\n      )}\n    >\n      {productDisplay?.recommend_text && (\n        <RecommendedBadge recommended={productDisplay?.recommend_text} />\n      )}\n      <div\n        className={cn(\n          \"flex flex-col h-full flex-grow\",\n          isRecommended && \"lg:translate-y-6\"\n        )}\n      >\n        <div className=\"h-full\">\n          <div className=\"flex flex-col\">\n            <div className=\"pb-4\">\n              <h2 className=\"text-2xl font-semibold px-6 truncate\">{name}</h2>\n              {productDisplay?.description && (\n                <div className=\"text-sm text-muted-foreground px-6 h-8\">\n                  <p className=\"line-clamp-2\">\n                    Everything from {productDisplay?.description}, plus:\n                  </p>\n                </div>\n              )}\n            </div>\n            <div className=\"mb-2\">\n              <h3 className=\"font-semibold h-16 flex px-6 items-center border-y mb-4 bg-secondary/40\">\n                <div className=\"line-clamp-2\">\n                  {mainPriceDisplay?.primary_text}{\" \"}\n                  {mainPriceDisplay?.secondary_text && (\n                    <span className=\"font-normal text-muted-foreground mt-1\">\n                      {mainPriceDisplay?.secondary_text}\n                    </span>\n                  )}\n                </div>\n              </h3>\n            </div>\n          </div>\n          {showFeatures && featureItems.length > 0 && (\n            <div className=\"flex-grow px-6 mb-6\">\n              <PricingFeatureList\n                items={featureItems}\n                showIcon={true}\n                everythingFrom={product.display?.everything_from}\n              />\n            </div>\n          )}\n        </div>\n        <div className={cn(\" px-6 \", isRecommended && \"lg:-translate-y-12\")}>\n          <PricingCardButton\n            recommended={productDisplay?.recommend_text ? true : false}\n            onClick={onButtonClick}\n            {...buttonProps}\n          >\n            {buttonText}\n          </PricingCardButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Pricing Feature List\nexport const PricingFeatureList = ({\n  items,\n  showIcon = true,\n  everythingFrom,\n  className,\n}: {\n  items: ProductItem[];\n  showIcon?: boolean;\n  everythingFrom?: string;\n  className?: string;\n}) => {\n  return (\n    <div className={cn(\"flex-grow\", className)}>\n      {everythingFrom && (\n        <p className=\"text-sm mb-4\">Everything from {everythingFrom}, plus:</p>\n      )}\n      <div className=\"space-y-3\">\n        {items.map((item, index) => (\n          <div key={index} className=\"flex items-start gap-2 text-sm\">\n            {showIcon && (\n              <Check className=\"h-4 w-4 text-primary flex-shrink-0 mt-0.5\" />\n            )}\n            <div className=\"flex flex-col\">\n              <span>{item.display?.primary_text}</span>\n              {item.display?.secondary_text && (\n                <span className=\"text-sm text-muted-foreground\">\n                  {item.display?.secondary_text}\n                </span>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Pricing Card Button\nexport interface PricingCardButtonProps extends React.ComponentProps<\"button\"> {\n  recommended?: boolean;\n  buttonUrl?: string;\n}\n\nexport const PricingCardButton = React.forwardRef<\n  HTMLButtonElement,\n  PricingCardButtonProps\n>(({ recommended, children, buttonUrl, onClick, className, ...props }, ref) => {\n  const [loading, setLoading] = useState(false);\n  return (\n    <Button\n      className={cn(\n        \"w-full py-3 px-4 group overflow-hidden relative transition-all duration-300 hover:brightness-90 border rounded-lg\",\n        className\n      )}\n      variant={recommended ? \"default\" : \"secondary\"}\n      // variant=\"default\"\n      ref={ref}\n      disabled={loading}\n      onClick={async (e) => {\n        setLoading(true);\n        try {\n          if (onClick) {\n            await onClick(e);\n\n            return;\n          }\n\n          if (buttonUrl) {\n            window.open(buttonUrl, \"_blank\");\n            return;\n          }\n        } catch (error) {\n          throw error;\n        } finally {\n          setLoading(false);\n        }\n      }}\n      {...props}\n    >\n      {loading ? (\n        <Loader2 className=\"h-4 w-4 animate-spin\" />\n      ) : (\n        <>\n          <div className=\"flex items-center justify-between w-full transition-transform duration-300 group-hover:translate-y-[-130%]\">\n            <span>{children}</span>\n            <span className=\"text-sm\">â†’</span>\n          </div>\n          <div className=\"flex items-center justify-between w-full absolute px-4 translate-y-[130%] transition-transform duration-300 group-hover:translate-y-0 mt-2 group-hover:mt-0\">\n            <span>{children}</span>\n            <span className=\"text-sm\">â†’</span>\n          </div>\n        </>\n      )}\n    </Button>\n  );\n});\nPricingCardButton.displayName = \"PricingCardButton\";\n\n// Annual Switch\nexport const AnnualSwitch = ({\n  isAnnualToggle,\n  setIsAnnualToggle,\n}: {\n  isAnnualToggle: boolean;\n  setIsAnnualToggle: (isAnnual: boolean) => void;\n}) => {\n  return (\n    <div className=\"flex items-center space-x-2 mb-4\">\n      <span className=\"text-sm text-muted-foreground\">Monthly</span>\n      <Switch\n        id=\"annual-billing\"\n        checked={isAnnualToggle}\n        onCheckedChange={setIsAnnualToggle}\n      />\n      <span className=\"text-sm text-muted-foreground\">Annual</span>\n    </div>\n  );\n};\n\nexport const RecommendedBadge = ({ recommended }: { recommended: string }) => {\n  return (\n    <div className=\"bg-secondary absolute border text-muted-foreground text-sm font-medium lg:rounded-full px-3 lg:py-0.5 lg:top-4 lg:right-4 top-[-1px] right-[-1px] rounded-bl-lg\">\n      {recommended}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/autumn/pricing-table.tsx"
    },
    {
      "path": "registry/pricing-table/lib/pricing-table-content.tsx",
      "content": "import { type CheckProductPreview } from \"autumn-js\";\n\nexport const getPricingTableContent = (product: any) => {\n  const { scenario, name, free_trial, price } = product;\n\n  if (free_trial && free_trial.trial_available) {\n    return {\n      buttonText: <p>Start Free Trial</p>,\n    };\n  }\n\n  switch (scenario) {\n    case \"scheduled\":\n      return {\n        buttonText: <p>Plan Scheduled</p>,\n      };\n\n    case \"active\":\n      return {\n        buttonText: <p>Current Plan</p>,\n      };\n\n    case \"new\":\n      if (price.interval) {\n        return {\n          buttonText: <p>Get started</p>,\n        };\n      } else {\n        return {\n          buttonText: <p>x</p>,\n        };\n      }\n\n    case \"renew\":\n      return {\n        buttonText: <p>Renew</p>,\n      };\n\n    case \"upgrade\":\n      return {\n        buttonText: <p>Upgrade</p>,\n      };\n\n    case \"downgrade\":\n      return {\n        buttonText: <p>Downgrade</p>,\n      };\n\n    case \"cancel\":\n      return {\n        buttonText: <p>Cancel Plan</p>,\n      };\n\n    default:\n      return {\n        buttonText: <p>Get Started</p>,\n      };\n  }\n};\n",
      "type": "registry:lib",
      "target": "lib/autumn/pricing-table-content.tsx"
    }
  ]
}