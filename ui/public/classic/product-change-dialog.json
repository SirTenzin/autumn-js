{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "classic/product-change-dialog",
  "type": "registry:component",
  "dependencies": [
    "autumn-js"
  ],
  "registryDependencies": [
    "https://pricecn.com/classic/pricing-dialog.json"
  ],
  "files": [
    {
      "path": "registry/product-change-dialog.tsx",
      "content": "\"use client\";\nimport React, { useEffect, useState } from \"react\";\nimport { Loader2 } from \"lucide-react\";\nimport {\n  PricingDialog,\n  PricingDialogTitle,\n  Information,\n  PriceItem,\n  QuantityInput,\n  PricingDialogFooter,\n  TotalPrice,\n  PricingDialogButton,\n} from \"@/components/pricing/pricing-dialog\";\n\nexport interface ProductChangeDialogProps {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  title: string;\n  message: string;\n  items?: {\n    description: string;\n    price: string;\n  }[];\n  dueToday?: {\n    price: number;\n    currency: string;\n  };\n  dueNextCycle?: {\n    price: number;\n    currency: string;\n  };\n  options?: any;\n  onClick: (options?: any) => Promise<void>;\n}\n\nexport default function ProductChangeDialog(params?: ProductChangeDialogProps) {\n  const [loading, setLoading] = useState(false);\n  const [prepaidTotals, setPrepaidTotals] = useState(0);\n  const [optionsInput, setOptionsInput] = useState<\n    {\n      featureId: string;\n      featureName: string;\n      billingUnits: number;\n      quantity?: number;\n      price?: string;\n    }[]\n  >(params?.options || []);\n\n  useEffect(() => {\n    let sum = 0;\n    optionsInput.forEach((option) => {\n      if (option.price && option.quantity) {\n        sum += parseFloat(option.price) * option.quantity;\n      }\n    });\n    setPrepaidTotals(sum);\n  }, [optionsInput]);\n\n  useEffect(() => {\n    setOptionsInput(params?.options || []);\n  }, [params?.options]);\n\n  if (!params) {\n    return <></>;\n  }\n\n  const { open, setOpen, onClick, title, message, items } = params;\n\n  return (\n    <PricingDialog open={open} setOpen={setOpen}>\n      <PricingDialogTitle>{title}</PricingDialogTitle>\n      <Information>{message}</Information>\n      {items &&\n        items.length > 0 &&\n        items.map((item) => {\n          const { description, price } = item;\n          return (\n            <PriceItem key={description}>\n              <span>{description}</span>\n              <span>{price}</span>\n            </PriceItem>\n          );\n        })}\n\n      {optionsInput.length > 0 &&\n        optionsInput.map((option, index) => {\n          const { featureName, billingUnits, quantity, price } = option;\n          return (\n            <PriceItem key={featureName}>\n              <span>{featureName}</span>\n              <QuantityInput\n                key={featureName}\n                value={quantity ? quantity / billingUnits : \"\"}\n                onChange={(e) => {\n                  const newOptions = [...optionsInput];\n                  newOptions[index].quantity =\n                    parseInt(e.target.value) * billingUnits;\n                  setOptionsInput(newOptions);\n                }}\n              >\n                <span className=\"text-muted-foreground\">\n                  Ã— ${price} per {billingUnits === 1 ? \" \" : billingUnits}{\" \"}\n                  {featureName}\n                </span>\n              </QuantityInput>\n            </PriceItem>\n          );\n        })}\n\n      <PricingDialogFooter>\n        {params.dueToday && (\n          <TotalPrice>\n            <span>Due Today</span>\n            <span>\n              {new Intl.NumberFormat(\"en-US\", {\n                style: \"currency\",\n                currency: params.dueToday.currency,\n              }).format(params.dueToday.price + prepaidTotals)}\n            </span>\n          </TotalPrice>\n        )}\n        <PricingDialogButton\n          size=\"sm\"\n          onClick={async () => {\n            setLoading(true);\n            try {\n              await onClick(optionsInput);\n            } catch (error) {\n              console.error(error);\n            }\n            setLoading(false);\n          }}\n          disabled={loading}\n        >\n          {loading ? <Loader2 className=\"w-4 h-4 animate-spin\" /> : \"Confirm\"}\n        </PricingDialogButton>\n      </PricingDialogFooter>\n    </PricingDialog>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/autumn/product-change-dialog.tsx"
    }
  ]
}